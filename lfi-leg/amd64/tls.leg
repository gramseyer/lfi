%{
#include "amd64/amd64.h"
#include "op.h"
#include "args.h"
#include "util.h"

#define YY_INPUT(ctx, buf, result, max_size)   \
{                                              \
    char yyc = ctx->op->text[ctx->idx];        \
    ctx->idx += yyc != 0;                      \
    result = yyc == 0 ? 0 : (*(buf) = yyc, 1); \
}                                              \

static int count;
%}

# We are assuming the code is compiled with -mno-tls-direct-seg-refs so that
# all TLS accesses are written as using %fs:0. This pass is an optimization for
# accesses written in the form mov %fs:0, %reg

Top = (ReadTP_rax | ReadTP_any | OpTP_any) !.

ReadTP_any = 'mov' [qwl]? SEP '%fs:' '0x'? '0' - COMMA r:REG - {
    char* label = xasprintf(".LFI_TLS%d", count++);
    mkinsn("pushq %%rax");
    mkinsn("xor %%eax, %%eax");
    mkdirective(".bundle_lock");
    mkinsn("leaq %s(%%rip), %%r11", label);
    mkinsn("jmpq *8(%s)", args.sysexternal ? "%r13" : "%r14");
    mklabel(label);
    mkdirective(".bundle_unlock");
    mkinsn("movq %%rax, %s", r.val);
    mkinsn("popq %%rax");
    rfree(r);
}

OpTP_any = m:NAME '%fs:' n:NUM - COMMA rest:REMAINDER - {
    char* label = xasprintf(".LFI_TLS%d", count++);
    mkinsn("pushq %%rax");
    mkinsn("movq $%s, %%rax", n.val);
    mkdirective(".bundle_lock");
    mkinsn("leaq %s(%%rip), %%r11", label);
    mkinsn("jmpq *8(%s)", args.sysexternal ? "%r13" : "%r14");
    mklabel(label);
    mkdirective(".bundle_unlock");
    mkinsn("movq %%rax, %%r11");
    mkinsn("popq %%rax");
    mkinsn("%s %%r11, %s", m.val, rest.val);
    rfree(rest); rfree(m); rfree(n)
}

ReadTP_rax = 'mov' [qwl]? SEP '%fs:' '0x'? '0' - COMMA '%rax' - {
    char* label = xasprintf(".LFI_TLS%d", count++);
    mkinsn("xor %%eax, %%eax");
    mkdirective(".bundle_lock");
    mkinsn("leaq %s(%%rip), %%r11", label);
    mkinsn("jmpq *8(%s)", args.sysexternal ? "%r13" : "%r14");
    mklabel(label);
    mkdirective(".bundle_unlock");
    free(label);
}

%%

void
amd64_tlspass(struct op* op)
{
    if (!op->insn)
        return;
    yycontext ctx;
    memset(&ctx, 0, sizeof(yycontext));
    ctx.op = op;
    oplocate(op);
    if (yyparse(&ctx)) {
        opremove(op);
        opfree(op);
    }
    yyrelease(&ctx);
}
